java8 version released in 2014

the following are the new features of java8
-----------------------------------------------

1)Lambda Expression

2)Functional Interface

3)Method reference

4)Default Methods

5)Streams Api

6)New Date/Time Api

6)Type Annotations

7)Nashorn, JavaScript Engine

8)Base64 Encode Decode

9)Optional class

10)Type and Repating Annotations

11)ForEach() method


=================================================================================
Anonymous InnerClass Vs Lambda Expression ::
------------------------------------------
Anonymous inner class can extend a normal class
Anonymous inner class can extend a abstract class
Anonymous inner class can implements an interface which contains any number of abstract methods


Lambda Expression can implements  an interface which contain a songle abstract method(i,e Functional Interface (FI))

Lambda Expression only applicable for (FI)

so Anonymous Inner class is more powerful than Lambda Expression

=====================================================================================
 Default Methods:: 
 ----------------
until 1.7v:

every method present interface is always "public and abstract"

     void m1();
     public void m1();
     abstract void m1();
     public abstract void m1();

all are equal

Related to Methods::

1.8v default methods & static methods are allowed
1.9v private methods are allowed

variables
-----------
every variable present in interface always 
public static final


Default Method / virtual Extension Method / Defender Method:
-------------------------------------------------------------
Defender means protection

with out efecting implementation classes if we want to add new method to the interface then 
we use default method concept 

we can override defaults methods also in implementation classes but
we have to declare as public

Interface myInterface{
 
default void m1(){
s.o.p("Default method");
}

}//interface



public class test implements myInterface{

public void m1(){
s.o.p("Over riding method");
}

}

---------------------------------------------------------------------
Q)is java supports multiple inheritence or not?

A)NO bcoz ambiguty problem

but python supports multiple inheritence


interface Left{
   default void m1(){
        s.o.p("Left Interface m1() method...");
   }
}


interface Right{
   default void m1(){
        s.o.p("Right Interface m1() method...");
   }
}


class Test implements Left,Right{

  public void m1(){
   // s.o.p("our own m1 method..."); 
    Left.super.m1();
     Right.super.m1();
    
    
   }//m1
  
   public static void main(String[] args){
Test t=new Test();
t.m1();
     
  }


}//class

--------------------------------------------------------------------
static method no related to class
class is very costly compared to interface

static means no related to object so no need to mention in class sp go for interface

public static void m1(){}

from 1.8v interface allows static methods also

public interface interface{

  public static void m1(){
       s.o.p("interface static mryhod");

      }
}

class Test implements interface{
    psvm{
   interface.m1();//calling
    
}

}
================================================================================================
Streams Api::

it is used to process the collection object.
A stream is a sequence of objects that supports various methods which can be pipelined to produce the desired output.

stream will takes input from collections ,Arrays or IO channels

streams don't change the orginal data structure, they only provide the result as per the pipelined methods.

Each "intermediate operation" is lazily executed and returns a stream as a result,

hence various intermediate operations can be pipelined.

"Terminal  Operations" marks at the end of the stream and returns the result.

Terminologies used::
-------------------
1)Intermediate Operatiions

   a)map
   b)filter
   c)sorted

2)Terminal Operations::

   a)collect
   b)forEach
   c)reduce


Intermediate  Operations::
===============================
1.map: 
       the map method is used to map the items in the collection to other objects according to the Predicate passed 
       passed as argument


    List number = Arrays.asList(1,2,3,4);
    List sqare = number.stream().map(x-> x*x).collect(Collectors.toList());


2.filter:
          The filter method is used to select elements as per the Predicate passed as argument.

        List names = Arrays.asList("Reflection", "Collection", "Stream");
        List result=names.stream.filter(s->s.startWith("S")).collect(Collectors.toList());



3.sorted: 
          The sorted method is used to sort the stream.
     
     List names = Arrays.asList("Reflection", "Collection", "Stream");

       List result=names.stream.sorted().collect(Collectors.toList());

        
 ========================================
Terminal Operations::

1.collect:
           the collect method is used to return the result of the intermediate operations performed on the stream      
    
            List number = Arrays.asList(1,2,3,4);
            Set sqare = number.stream().map(x-> x*x).collect(Collectors.toSet());


2.forEach:
           the forEach method is used to iterate through every element of the stream
 
           List number = Arrays.asList(1,2,3,4);
           number.stream().map(x-> x*x).forEach(y-> System.out.println(y));



3.reduce:
         the reduce method is used to reduce the elements of a stream to a single value.
         
         The reduce method takes as a BinaryOpertor as a Parameter.
     
         List number = Arrays.asList(1,2,3,4);
         int even = number.stream().filter(x-> x%2==0).reduce(0,(ans,i)->ans+i);

       Here ans variable assigned 0 as the initial value and i is added to it.










































